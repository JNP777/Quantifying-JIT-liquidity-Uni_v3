"""
Script supporting the calculations and results described in medium.jnp777.com/xxxxx
Created on Sun May 23 10:11:41 2021
@author: JNP
"""

import os
from datetime import datetime
import pandas as pd
import numpy as np

import pooldata as p_data
import JIT_funcs as JIT


#Parameters of the case to analyze
begin=datetime(2021,6,1)
end=datetime(2021,8,7)
pools=p_data.query_top_pools(200,'volumeUSD')
pools['pool']=pools['pool_name'].str.split("-").str[0:2]
#Keeping only ETH/Stables pools
pools=pools.loc[pools['pool'].isin([['USDC','WETH'],['WETH','USDT'],['DAI','WETH']])]
pools_adresses=pools['id'].to_list()

#Storage for results
results={}
#Storage for csvs of every pool
path_result=os.getcwd()+"\\Side_Analisis\JIT liquidity\\Results"

#Loop to get a dataframe with all JIT operations happened in the given dataframe for every pool in the list
for idx,pool_adress in enumerate(pools_adresses):
    
    #Handling pools with no JIT operations with a try/except
    try:
        
        #Using JIT_funcs to obtain all JIT operations
        jit_final=JIT.JIT_pool(begin,end,pool_adress)
        
        #Using poolDayData to obtain the total fees generated by the pool
        pool_data=p_data.extract_pooldayData(begin,end,pool_adress)
        pool_data['feesUSD']=pool_data['feesUSD'].astype(float)
        pool_data['feesUSD_ac_pool']=pool_data['feesUSD'].cumsum()
        pool_data['date']=pool_data['timestamp_1'].dt.date
        jit_final['date']=jit_final['timestamp_1'].dt.date

        #Merging pool data with JIT data in order to compare it
        jit_final=jit_final.merge(pool_data[['date','feesUSD_ac_pool']],how='left',left_on='date',right_on='date')

        #Ratio of fees extracted by JIT operations
        ratio_extracted=jit_final['feesUSD'].sum()/pool_data['feesUSD'].sum()
        
        #Storing data with a readable pool_id
        pool_name=pools['pool_name'].iloc[idx]
        jit_final['pool_name']=pool_name
        #Saving to a csv
        jit_final.to_csv(path_result+"\\%s.csv" %(pool_adress))
        #Creating a summary in a dict
        results[pool_name]={
            'feesUSD': pool_data['feesUSD'].sum() ,
            'feesExtracted':jit_final['feesUSD'].sum() ,
            'ratio_extracted': round(ratio_extracted,5) ,
        }
        print(results)

    except: 
        print("%s doesnt have JIT operations" %(pools['pool_name'].iloc[idx]))
        results[pools['pool_name'].iloc[idx]]={ 'ratio_extracted': 'No JIT operations' }
        pass





